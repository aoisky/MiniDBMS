/* DBInterpreterTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. DBInterpreterTokenManager.java */
package edu.purdue.cs448.DBMS;
import edu.purdue.cs448.DBMS.Structure.*;
import java.util.*;
import java.io.InputStream;
import java.io.IOException;

/** Token Manager. */
@SuppressWarnings("unused")public class DBInterpreterTokenManager implements DBInterpreterConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3000007ffffff80L) != 0L)
         {
            jjmatchedKind = 50;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
            return 4;
         if ((active0 & 0x3000007ffefff80L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x208c8000L) != 0L)
            return 4;
         if ((active0 & 0x3000007df637f80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 2;
            }
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x30000029400b000L) != 0L)
            return 4;
         if ((active0 & 0x54b634f80L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 3;
            }
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x44b420f80L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 4;
            }
            return 4;
         }
         if ((active0 & 0x100214000L) != 0L)
            return 4;
         return -1;
      case 5:
         if ((active0 & 0x44b400000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
            return 4;
         }
         if ((active0 & 0x100020f80L) != 0L)
            return 4;
         return -1;
      case 6:
         if ((active0 & 0x409000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
            return 4;
         }
         if ((active0 & 0x42400000L) != 0L)
            return 4;
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L)
            return 4;
         if ((active0 & 0x401000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L)
            return 4;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 37:
         return jjStopAtPos(0, 48);
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 42:
         return jjStopAtPos(0, 46);
      case 43:
         return jjStopAtPos(0, 44);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         return jjStopAtPos(0, 45);
      case 47:
         return jjStopAtPos(0, 47);
      case 59:
         return jjStopAtPos(0, 37);
      case 60:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 61:
         return jjStopAtPos(0, 38);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10200400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x48001800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2002000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20008100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400040080L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100010000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x300000200000200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100030000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4d840880L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10204000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20088100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x403400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000200000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x500010000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000200204400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4020880L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000100L);
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 4);
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 89:
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x600L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000980L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100010000L);
      case 77:
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 79:
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 4);
         break;
      case 80:
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 4);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 4);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 4);
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000004000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 4);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x300000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000080L);
      case 69:
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 4);
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100020000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 75:
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 4);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x9000100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0xe00L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 66:
      case 98:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 4);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 4);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 4);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 4);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 4);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 4);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 4);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 4);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(11, 12); }
                  else if (curChar == 46)
                     { jjCheckNAdd(6); }
                  break;
               case 1:
                  { jjAddStates(10, 11); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 46)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 12:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 13:
                  if (curChar == 39)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 14:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 15:
                  if (curChar == 39)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 16:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 18:
                  if (curChar == 39 && kind > 55)
                     kind = 55;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(21, 5); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(31); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 123)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 125 && kind > 6)
                     kind = 6;
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(4); }
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 11:
                  { jjAddStates(17, 18); }
                  break;
               case 14:
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 17:
                  { jjCheckNAddStates(12, 14); }
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(19, 20); }
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(10, 11); }
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 18); }
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(12, 14); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   20, 21, 5, 22, 23, 28, 29, 14, 16, 18, 1, 2, 16, 17, 18, 8, 
   9, 11, 12, 26, 27, 30, 31, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\51", "\73", "\75", "\74", 
"\74\75", "\41\75", "\76", "\76\75", "\53", "\55", "\52", "\57", "\45", "\54", null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public DBInterpreterTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public DBInterpreterTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3dfffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[32];
    private final int[] jjstateSet = new int[2 * 32];

    
    protected char curChar;
}
