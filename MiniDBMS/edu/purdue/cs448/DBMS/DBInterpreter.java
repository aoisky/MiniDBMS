/* DBInterpreter.java */
/* Generated By:JavaCC: Do not edit this line. DBInterpreter.java */
    package edu.purdue.cs448.DBMS;


    import edu.purdue.cs448.DBMS.Structure.*;
    import java.util.*;
    import java.io.InputStream;
    import java.io.IOException;

    public class DBInterpreter implements DBInterpreterConstants {
        public static void main(String[] args) throws IOException{
            DBInterpreter interpreter;
            DBUserController userController;
            DBExecutor executor;
            Query query;
            InputStream input;

            if (args.length != 1) {
                System.out.println("Use: minidbms <userName>");
                return;
            }

                String userName = args[0];

                userController = new DBUserController(userName);

                input = System.in;
                interpreter = new DBInterpreter(input);


                executor = new DBExecutor();
                while(true){
                        try {
                                //Prompt when in interactive mode
                                if(input == System.in){
                                        System.out.print("YSQL>>");
                                }
                                query = interpreter.Query();

                                query = userController.userCheck(query);

                                if(query != null){
                                        executor.execute(query);
                                }

                                if(input != System.in && input.available() == 0){
                                        return;
                                }
                        } catch (ParseException ex) {
                                System.err.println(ex.getMessage());
                                return;
                        } catch (Error ex){
                                System.err.println(ex.getMessage());
                                return;
                        } catch (IOException ex){
                                System.err.println("YSQL: IO Exception");
                                return;
                        }
                }


     }
                //a method to recover from syntax error
                void error_skipto(int kind) {

                        Token t;
                        do {
                                t = getNextToken();
                        } while (t.kind != kind);
                                // The above loop consumes tokens all the way up to a token of
                                // "kind".  We use a do-while loop rather than a while because the
                                // current token is the one immediately before the erroneous token
                                // (in our case the token immediately before what should have been
                                // "if"/"while".
                }

// Grammar
  final public Query Query() throws ParseException {Query query = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
{if ("" != null) return null;}
        break;
        }
      case KWORD_SELECT:
      case KWORD_INSERT:
      case KWORD_UPDATE:
      case KWORD_CREATE:
      case KWORD_DELETE:
      case KWORD_DROP:
      case KWORD_HELP:
      case KWORD_QUIT:{
        query = SQLStatement();
        jj_consume_token(SYM_SEMICOLON);
{if ("" != null) return query;}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.out.println(e.toString());
                error_skipto(SYM_SEMICOLON);
                {if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
  }

// FILLIN: Remainder of the grammar
  final public Query SQLStatement() throws ParseException {Query query;
    if (jj_2_1(2)) {
      jj_consume_token(KWORD_CREATE);
      jj_consume_token(KWORD_TABLE);
      query = Create();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KWORD_DROP:{
        jj_consume_token(KWORD_DROP);
        jj_consume_token(KWORD_TABLE);
        query = Drop();
        break;
        }
      case KWORD_SELECT:{
        jj_consume_token(KWORD_SELECT);
        query = Select();
        break;
        }
      case KWORD_INSERT:{
        jj_consume_token(KWORD_INSERT);
        jj_consume_token(KWORD_INTO);
        query = Insert();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(KWORD_DELETE);
          jj_consume_token(KWORD_FROM);
          query = Delete();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case KWORD_UPDATE:{
            jj_consume_token(KWORD_UPDATE);
            query = Update();
            break;
            }
          case KWORD_HELP:{
            jj_consume_token(KWORD_HELP);
            query = Help();
            break;
            }
          case KWORD_QUIT:{
            jj_consume_token(KWORD_QUIT);
            query = Quit();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            if (jj_2_3(2)) {
              jj_consume_token(KWORD_CREATE);
              jj_consume_token(KWORD_USER);
              query = CreateUser();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case KWORD_DELETE:{
                jj_consume_token(KWORD_DELETE);
                jj_consume_token(KWORD_USER);
                query = DeleteUser();
                break;
                }
              case KWORD_CREATE:{
                jj_consume_token(KWORD_CREATE);
                jj_consume_token(KWORD_SUBSCHEMA);
                query = CreateSubschema();
                break;
                }
              default:
                jj_la1[3] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
{if ("" != null) return query;}
    throw new Error("Missing return statement in function");
  }

  final public CreateSubschema CreateSubschema() throws ParseException {Query query;
        Token tableName;
        Token attrName;
        ArrayList<String> attrNameList = new ArrayList<String>();
    tableName = Identifier();
    attrName = Identifier();
attrNameList.add(attrName.image);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(SYM_COMMA);
      attrName = Identifier();
attrNameList.add(attrName.image);
    }
{if ("" != null) return new CreateSubschema(tableName.image, attrNameList);}
    throw new Error("Missing return statement in function");
  }

  final public CreateUser CreateUser() throws ParseException {Query query;
     Token userName;
     User.UserType userType;
    userName = Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 56:{
      jj_consume_token(56);
userType = User.UserType.USER_A;
      break;
      }
    case 57:{
      jj_consume_token(57);
userType = User.UserType.USER_B;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new CreateUser(userType, userName.image);}
    throw new Error("Missing return statement in function");
  }

  final public DeleteUser DeleteUser() throws ParseException {Query query;
    Token userName;
    userName = Identifier();
{if ("" != null) return new DeleteUser(userName.image);}
    throw new Error("Missing return statement in function");
  }

  final public Create Create() throws ParseException {Token tableName;
    Token attrName;
    ArrayList<Attribute> attrList = new ArrayList<Attribute>();
    Hashtable<String, Integer> attrPosTable = new Hashtable<String, Integer>();
    Attribute attribute;
    Token lengthToken = null;
    Condition cond = null;
    Attribute.Type type;
    ArrayList<Integer> primaryList = new ArrayList<Integer>();
    Token foreignTableName;
    Token foreignAttribute;
    Hashtable<String, ForeignReferences> foreignRefTable = new Hashtable<String, ForeignReferences>();
    tableName = Identifier();
    jj_consume_token(SYM_LPARENTHESE);
    label_2:
    while (true) {
      attrName = Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KWORD_DECIMAL:{
        jj_consume_token(KWORD_DECIMAL);
type = Attribute.Type.DECIMAL;
        break;
        }
      case KWORD_INT:{
        jj_consume_token(KWORD_INT);
type = Attribute.Type.INT;
        break;
        }
      case KWORD_CHAR:{
        jj_consume_token(KWORD_CHAR);
type = Attribute.Type.CHAR;
        jj_consume_token(SYM_LPARENTHESE);
        lengthToken = jj_consume_token(INT_LITERAL);
        jj_consume_token(SYM_RPARENTHESE);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KWORD_CHECK:{
        jj_consume_token(KWORD_CHECK);
        jj_consume_token(SYM_LPARENTHESE);
        cond = Condition();
        jj_consume_token(SYM_RPARENTHESE);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SYM_COMMA);
if(cond != null && !cond.idCheck(attrName.image))
                        {if (true) throw new Error("CREATE TABLE: CHECK ATTRIBUTE INVALID " + attrName.image);}
                attribute = new Attribute(type, attrName.image);
                if(lengthToken != null)attribute.setLength(Integer.parseInt(lengthToken.image));
                if(cond != null){
                        attribute.setCheckCond(cond);
                        cond = null;
                }
                if(!attrList.contains(attribute)){
                        //Save position of attribute name
                        attrPosTable.put(attrName.image, Integer.valueOf(attrList.size()));
                        attrList.add(attribute);
                }else
                        {if (true) throw new Error("CREATE TABLE: DUPLICATED ATTRIBUTES");}
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(KWORD_PRIMARY);
    jj_consume_token(KWORD_KEY);
    jj_consume_token(SYM_LPARENTHESE);
    attrName = Identifier();
if( !primaryList.contains(attrName.image) && attrList.contains( new Attribute(Attribute.Type.INT, attrName.image) ) )
                                primaryList.add(attrPosTable.get(attrName.image));
                        else
                                {if (true) throw new Error("CREATE TABLE: INVALID PRIMARY KEY " + attrName.image);}
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(SYM_COMMA);
      attrName = Identifier();
if( !primaryList.contains(attrName.image) && attrList.contains( new Attribute(Attribute.Type.INT, attrName.image) ) )
                                primaryList.add(attrPosTable.get(attrName.image));
                        else
                                {if (true) throw new Error("CREATE TABLE: INVALID PRIMARY KEY " + attrName.image);}
    }
    jj_consume_token(SYM_RPARENTHESE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(SYM_COMMA);
      jj_consume_token(KWORD_FOREIGN);
      jj_consume_token(KWORD_KEY);
      jj_consume_token(SYM_LPARENTHESE);
      attrName = Identifier();
      jj_consume_token(SYM_RPARENTHESE);
      jj_consume_token(KWORD_REF);
      foreignTableName = Identifier();
      jj_consume_token(SYM_LPARENTHESE);
      foreignAttribute = Identifier();
      jj_consume_token(SYM_RPARENTHESE);
if(!attrList.contains(new Attribute(Attribute.Type.INT, attrName.image)))
                                {if (true) throw new Error("CREATE TABLE: FOREIGN KEY " + attrName.image + " NOT EXISTS");}

                        if(foreignTableName.image.equals(tableName.image))
                                {if (true) throw new Error("CREATE TABLE: FOREIGN KEY TABLE CANNOT BE THE SAME NAME");}

                        foreignRefTable.put(attrName.image, new ForeignReferences(foreignTableName.image, foreignAttribute.image));
    }
    jj_consume_token(SYM_RPARENTHESE);
{if ("" != null) return new Create(tableName.image, attrList, primaryList, foreignRefTable, attrPosTable);}
    throw new Error("Missing return statement in function");
  }

  final public Drop Drop() throws ParseException {Drop dropQuery;
        Token tableName;
    tableName = Identifier();
{if ("" != null) return new Drop(tableName.image);}
    throw new Error("Missing return statement in function");
  }

  final public Select Select() throws ParseException {Token attribute;
        ArrayList<String> attrNameList = new ArrayList<String>();
        Token table;
        ArrayList<String> tableList = new ArrayList<String>();
        Condition cond = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      attribute = Identifier();
attrNameList.add(attribute.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SYM_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(SYM_COMMA);
        attribute = Identifier();
attrNameList.add(attribute.image);
      }
      break;
      }
    case SYM_ASTERISK:{
      attribute = jj_consume_token(SYM_ASTERISK);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(KWORD_FROM);
    table = Identifier();
tableList.add(table.image);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(SYM_COMMA);
      table = Identifier();
tableList.add(table.image);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KWORD_WHERE:{
      jj_consume_token(KWORD_WHERE);
      cond = Condition();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
if(attribute.image.equals("*"))
                        {if ("" != null) return new Select(tableList, cond, true);}
                else
                        {if ("" != null) return new Select(attrNameList, tableList, cond);}
    throw new Error("Missing return statement in function");
  }

  final public Insert Insert() throws ParseException {Token table;
        Token value;
        ArrayList<String> valueList = new ArrayList<String>();
    table = Identifier();
    jj_consume_token(KWORD_VALUES);
    jj_consume_token(SYM_LPARENTHESE);
    value = InsertValue();
valueList.add(value.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      jj_consume_token(SYM_COMMA);
      value = InsertValue();
valueList.add(value.image);
    }
    jj_consume_token(SYM_RPARENTHESE);
{if ("" != null) return new Insert(table.image, valueList);}
    throw new Error("Missing return statement in function");
  }

  final public Delete Delete() throws ParseException {Token table;
        Condition cond = null;
    table = Identifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KWORD_WHERE:{
      jj_consume_token(KWORD_WHERE);
      cond = Condition();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
{if ("" != null) return new Delete(table.image, cond);}
    throw new Error("Missing return statement in function");
  }

  final public Update Update() throws ParseException {Token table;
        Condition cond = null;
        AttrAssign attrAssign;
        ArrayList<AttrAssign> attrAssignList = new ArrayList<AttrAssign>();
    table = Identifier();
    jj_consume_token(KWORD_SET);
    attrAssign = AttrAssign();
attrAssignList.add(attrAssign);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_COMMA:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(SYM_COMMA);
      attrAssign = AttrAssign();
attrAssignList.add(attrAssign);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KWORD_WHERE:{
      jj_consume_token(KWORD_WHERE);
      cond = Condition();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return new Update(table.image, attrAssignList, cond);}
    throw new Error("Missing return statement in function");
  }

  final public Help Help() throws ParseException {Token describeToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case KWORD_DESCRIBE:{
      jj_consume_token(KWORD_DESCRIBE);
      describeToken = Identifier();
{if ("" != null) return new Help(Help.HelpType.DESCRIBE, describeToken.image);}
      break;
      }
    case KWORD_CREATE:{
      jj_consume_token(KWORD_CREATE);
      jj_consume_token(KWORD_TABLE);
{if ("" != null) return new Help(Help.HelpType.CREATE);}
      break;
      }
    case KWORD_DROP:{
      jj_consume_token(KWORD_DROP);
      jj_consume_token(KWORD_TABLE);
{if ("" != null) return new Help(Help.HelpType.DROP);}
      break;
      }
    case KWORD_SELECT:{
      jj_consume_token(KWORD_SELECT);
{if ("" != null) return new Help(Help.HelpType.SELECT);}
      break;
      }
    case KWORD_INSERT:{
      jj_consume_token(KWORD_INSERT);
{if ("" != null) return new Help(Help.HelpType.INSERT);}
      break;
      }
    case KWORD_DELETE:{
      jj_consume_token(KWORD_DELETE);
{if ("" != null) return new Help(Help.HelpType.DELETE);}
      break;
      }
    case KWORD_UPDATE:{
      jj_consume_token(KWORD_UPDATE);
{if ("" != null) return new Help(Help.HelpType.UPDATE);}
      break;
      }
    case KWORD_TABLES:{
      jj_consume_token(KWORD_TABLES);
{if ("" != null) return new Help(Help.HelpType.TABLES);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Query Quit() throws ParseException {
    jj_consume_token(SYM_SEMICOLON);
System.out.println(); System.exit(0); {if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public AttrAssign AttrAssign() throws ParseException {Token attribute;
        Value value;
    attribute = Identifier();
    jj_consume_token(SYM_EQUAL);
    value = UpdateValue();
{if ("" != null) return new AttrAssign(attribute.image, value);}
    throw new Error("Missing return statement in function");
  }

  final public Condition Condition() throws ParseException {Exp exp;
        Condition cond;
    exp = LogicOp();
{if ("" != null) return new Condition(exp);}
    throw new Error("Missing return statement in function");
  }

  final public Exp LogicOp() throws ParseException {Exp leftExp = null;
    Exp rightExp = null;
    Token op;
    leftExp = CmpOp();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KWORD_AND:
      case KWORD_OR:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KWORD_AND:{
        jj_consume_token(KWORD_AND);
        break;
        }
      case KWORD_OR:{
        jj_consume_token(KWORD_OR);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
op = token;
      rightExp = CmpOp();
leftExp = new BinaryExp(leftExp, op.image, rightExp);
    }
{if ("" != null) return leftExp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp CmpOp() throws ParseException {Exp leftExp = null;
    Exp rightExp = null;
    Token op;
    leftExp = AddOp();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_EQUAL:
      case SYM_LESS:
      case SYM_LESSEQUAL:
      case SYM_NOTEQUAL:
      case SYM_GREATER:
      case SYM_GREATEREQUAL:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_LESS:{
        jj_consume_token(SYM_LESS);
        break;
        }
      case SYM_LESSEQUAL:{
        jj_consume_token(SYM_LESSEQUAL);
        break;
        }
      case SYM_EQUAL:{
        jj_consume_token(SYM_EQUAL);
        break;
        }
      case SYM_NOTEQUAL:{
        jj_consume_token(SYM_NOTEQUAL);
        break;
        }
      case SYM_GREATER:{
        jj_consume_token(SYM_GREATER);
        break;
        }
      case SYM_GREATEREQUAL:{
        jj_consume_token(SYM_GREATEREQUAL);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
op = token;
      rightExp = AddOp();
leftExp = new BinaryExp(leftExp, op.image, rightExp);
    }
{if ("" != null) return leftExp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp AddOp() throws ParseException {Exp leftExp = null;
    Exp rightExp = null;
    Token op;
    leftExp = MulOp();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_PLUS:
      case SYM_MINUS:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_PLUS:{
        jj_consume_token(SYM_PLUS);
        break;
        }
      case SYM_MINUS:{
        jj_consume_token(SYM_MINUS);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
op = token;
      rightExp = MulOp();
leftExp = new BinaryExp(leftExp, op.image, rightExp);
    }
{if ("" != null) return leftExp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp MulOp() throws ParseException {Exp leftExp = null;
    Exp rightExp = null;
    Token op;
    leftExp = PrimaryExp();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_ASTERISK:
      case SYM_SLASH:
      case SYM_PERCENT:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYM_ASTERISK:{
        jj_consume_token(SYM_ASTERISK);
        break;
        }
      case SYM_SLASH:{
        jj_consume_token(SYM_SLASH);
        break;
        }
      case SYM_PERCENT:{
        jj_consume_token(SYM_PERCENT);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
op = token;
      rightExp = PrimaryExp();
leftExp = new BinaryExp(leftExp, op.image, rightExp);
    }
{if ("" != null) return leftExp;}
    throw new Error("Missing return statement in function");
  }

  final public Exp PrimaryExp() throws ParseException {Exp exp;
Token idToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LITERAL:{
      jj_consume_token(INT_LITERAL);
{if ("" != null) return new IntExp(Integer.parseInt(token.image));}
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
{if ("" != null) return new DoubleExp(Double.parseDouble(token.image));}
      break;
      }
    case STRING_DQUOTE_LITERAL:{
      jj_consume_token(STRING_DQUOTE_LITERAL);
{if ("" != null) return new StrExp(token.image);}
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
{if ("" != null) return new StrExp(token.image);}
      break;
      }
    case IDENTIFIER:{
      idToken = Identifier();
{if ("" != null) return new IdExp(idToken.image);}
      break;
      }
    case SYM_LPARENTHESE:{
      jj_consume_token(SYM_LPARENTHESE);
      exp = LogicOp();
      jj_consume_token(SYM_RPARENTHESE);
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Value UpdateValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LITERAL:{
      jj_consume_token(INT_LITERAL);
{if ("" != null) return new Value(Integer.parseInt(token.image));}
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
{if ("" != null) return new Value(Double.parseDouble(token.image));}
      break;
      }
    case STRING_DQUOTE_LITERAL:{
      jj_consume_token(STRING_DQUOTE_LITERAL);
{if ("" != null) return new Value(token.image);}
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
{if ("" != null) return new Value(token.image);}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token InsertValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LITERAL:{
      jj_consume_token(INT_LITERAL);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    case STRING_DQUOTE_LITERAL:{
      jj_consume_token(STRING_DQUOTE_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(KWORD_CREATE)) return true;
    if (jj_scan_token(KWORD_USER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(KWORD_DELETE)) return true;
    if (jj_scan_token(KWORD_FROM)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(KWORD_CREATE)) return true;
    if (jj_scan_token(KWORD_TABLE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DBInterpreterTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x84001f81,0x1180,0x84000200,0xc00,0x0,0x0,0x70000000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x4000,0x0,0x4000,0x8001f80,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x20000,0x3000000,0x0,0x0,0x40000,0x20000,0x20000,0x20000,0x44000,0x20000,0x0,0x20000,0x0,0x20000,0x0,0x1,0x0,0x0,0xfc0,0xfc0,0x3000,0x3000,0x1c000,0x1c000,0xdc0008,0xd80000,0xd80000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DBInterpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DBInterpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DBInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DBInterpreter(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DBInterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DBInterpreter(DBInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DBInterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
